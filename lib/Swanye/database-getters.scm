;;;; This lib file was generated by GNU Artanis, please add your license header below.
;;;; And please respect the freedom of other people, please.
;;;; <YOUR LICENSE HERE>

(define-module (Swanye database-getters)
  #:use-module (srfi    srfi-1)
  #:use-module (srfi    srfi-9)
  #:use-module (srfi    srfi-19)
  #:use-module (srfi    srfi-26)
  #:use-module (web         uri)
  #:use-module (Swanye    utils)
  #:use-module (artanis   utils)
  #:use-module (artanis    ssql)
  #:use-module (artanis third-party      json)
  #:use-module (app     models          USERS)
  #:use-module (app     models         ACTORS)
  #:use-module (app     models      ENDPOINTS)
  #:use-module (app     models        OBJECTS)
  #:use-module (app     models       SESSIONS)
  #:use-module (app     models      TIMELINES)
  #:use-module (app     models      FOLLOWERS)
  #:export (<activityPub-object> ap-object?   ap-object-attributed-to ap-object-db-id
                                              ap-object-content       ap-object-ap-id
                                              ap-object-start-time    ap-object-type
                                              ap-object-end-time      ap-object-name
                                              ap-object-published
            get-objects-where
            get-object-dbID-by-apID
            <activityPub-actor>  ap-actor?    ap-actor-db-id
                                              ap-actor-ap-id
                                              ap-actor-type
                                              ap-actor-inbox
                                              ap-actor-outbox
                                              ap-actor-following
                                              ap-actor-followers
                                              ap-actor-liked
                                              ap-actor-featured
                                              ap-actor-name
                                              ap-actor-preferred-username
                                              ap-actor-attributed-to
                                              ap-actor-content
                                              ap-actor-start-time
                                              ap-actor-end-time
                                              ap-actor-published
                                              ap-actor-summary
            get-actors-where
            <swanye-user>        swanye-user? swanye-user-db-id
                                              swanye-user-ap-id
                                              swanye-user-email
                                              swanye-user-password
                                              swanye-user-salt
                                              swanye-user-created-at
                                              swanye-user-confirmation-token
                                              swanye-user-public-key
                                              swanye-user-private-key
                                              swanye-user-type
                                              swanye-user-inbox
                                              swanye-user-outbox
                                              swanye-user-following
                                              swanye-user-followers
                                              swanye-user-liked
                                              swanye-user-featured
                                              swanye-user-name
                                              swanye-user-preferred-username
                                              swanye-user-attributed-to
                                              swanye-user-content
                                              swanye-user-start-time
                                              swanye-user-end-time
                                              swanye-user-published
                                              swanye-user-summary
            get-users-where
            get-only-user-where
            get-home-timeline
            get-followers-of))

;;;;;;;;;;;;;;;;;;;;;
;;  O B J E C T S  ;;
;;;;;;;;;;;;;;;;;;;;;
(define-record-type <activityPub-object>
  (make-ap-object databaseID activityPubID type    attributedTo content
                  name       startTime     endTime published    summary)
  ap-object?
  (databaseID    ap-object-db-id         ap-object-db-id-set!)
  (activityPubID ap-object-ap-id         ap-object-ap-id-set!)
  (type          ap-object-type          ap-object-type-set!)
  (attributedTo  ap-object-attributed-to ap-object-attributed-to-set!)
  (content       ap-object-content       ap-object-content-set!)
  (name          ap-object-name          ap-object-name-set!)
  (startTime     ap-object-start-time    ap-object-start-time-set!)
  (endTime       ap-object-end-time      ap-object-end-time-set!)
  (published     ap-object-published     ap-object-published-set!)
  (summary       ap-object-summary       ap-object-summary-set!))

(define (get-objects-where column values)
  (if (null? values)
      '()
    (map
      (lambda (object)
        (create-database-entity make-ap-object object
          ["OBJECT_ID"     identity]
          [    "AP_ID"     identity  (compose string->uri string-reverse)]
          ["OBJECT_TYPE"   identity]
          ["ATTRIBUTED_TO" positive? (cut get-actors-where #:ACTOR_ID <> #t)]
          ["CONTENT"       identity]
          ["NAME"          identity]
          ["STARTTIME"     positive? (compose time-utc->date (cut make-time time-utc 0 <>))]
          [  "ENDTIME"     positive? (compose time-utc->date (cut make-time time-utc 0 <>))]
          ["PUBLISHED"     positive? (compose time-utc->date (cut make-time time-utc 0 <>))]
          ["SUMMARY"       identity]))
      ($OBJECTS 'get #:columns '(*) #:condition (where column values)))))

(define (get-object-dbID-by-apID activityPubID)
  (if-let ([possObj null? ($OBJECTS 'get #:columns   '(OBJECT_ID)
                                         #:condition (where
                                                       #:AP_ID
                                                       (string-reverse
                                                         activityPubID)))])
      #f
    (cdaar possObj)))

;;;;;;;;;;;;;;;;;;;
;;  A C T O R S  ;;
;;;;;;;;;;;;;;;;;;;
(define-record-type <activityPub-actor>
  (make-ap-actor databaseID activityPubID type              inbox
                 outbox     following     followers         liked
                 featured   name          preferredUsername attributedTo
                 content    startTime     endTime           published    summary)
  ap-actor?
  (databaseID        ap-actor-db-id              ap-actor-db-id-set!)
  (activityPubID     ap-actor-ap-id              ap-actor-ap-id-set!)
  (type              ap-actor-type               ap-actor-type-set!)
  (inbox             ap-actor-inbox              ap-actor-inbox-set!)
  (outbox            ap-actor-outbox             ap-actor-outbox-set!)
  (following         ap-actor-following          ap-actor-following-set!)
  (followers         ap-actor-followers          ap-actor-followers-set!)
  (liked             ap-actor-liked              ap-actor-liked-set!)
  (featured          ap-actor-featured           ap-actor-featured-set!)
  (name              ap-actor-name               ap-actor-name-set!)
  (preferredUsername ap-actor-preferred-username ap-actor-preferred-username-set!)
  (attributedTo      ap-actor-attributed-to      ap-actor-attributed-to-set!)
  (content           ap-actor-content            ap-actor-content-set!)
  (startTime         ap-actor-start-time         ap-actor-start-time-set!)
  (endTime           ap-actor-end-time           ap-actor-end-time-set!)
  (published         ap-actor-published          ap-actor-published-set!)
  (summary           ap-actor-summary            ap-actor-summary-set!))

(define* (get-actors-where column values #:optional [returnObjectIfPresent #f])
  (if (null? values)
      '()
    (let ([isACTOR (and
                     (not returnObjectIfPresent)
                     (memq column '(#:ACTOR_ID  #:INBOX #:FOLLOWING #:OUTBOX
                                    #:OBJECT_ID #:LIKED #:FOLLOWERS #:FEATURED #:PREFERRED_USERNAME)))])
      (filter
        identity
        (map
          (lambda (dbENTITY)
            (if-let ([otherENTITY null? ((if isACTOR $OBJECTS $ACTORS)
                                          'get
                                          #:columns   '(*)
                                          #:condition (where
                                                        (if isACTOR #:OBJECT_ID #:ACTOR_ID)
                                                        (assoc-ref
                                                          dbENTITY
                                                          (if isACTOR "ACTOR_ID" "OBJECT_ID"))))])
                (if returnObjectIfPresent dbENTITY #f)
              (create-database-entity make-ap-actor (apply append (cons dbENTITY otherENTITY))
                ["OBJECT_ID"          identity]
                [    "AP_ID"          identity              (compose string->uri string-reverse)]
                ["OBJECT_TYPE"        identity]
                [ "INBOX"             identity              string->uri]
                ["OUTBOX"             identity              string->uri]
                ["FOLLOWING"          (negate string-null?) string->uri]
                ["FOLLOWERS"          (negate string-null?) string->uri]
                ["LIKED"              (negate string-null?) string->uri]
                ["FEATURED"           (negate string-null?) string->uri]
                ["NAME"               identity]
                ["PREFERRED_USERNAME" identity]
                ["ATTRIBUTED_TO"      positive?             (cut get-objects-where #:OBJECT_ID <>)]
                ["CONTENT"            identity]
                ["STARTTIME"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                [  "ENDTIME"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                ["PUBLISHED"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                ["SUMMARY"            identity])))
          ((if isACTOR $ACTORS $OBJECTS) 'get #:columns   '(*)
                                              #:condition (where
                                                            (cond
                                                             [(and (eq? column #:OBJECT_ID) isACTOR)
                                                                   #:ACTOR_ID]
                                                             [(and (eq? column #:ACTOR_ID)  (not isACTOR))
                                                                   #:OBJECT_ID]
                                                             [else column])
                                                            values)))))))

;;;;;;;;;;;;;;;;;
;;  U S E R S  ;;
;;;;;;;;;;;;;;;;;
(define-record-type <swanye-user>
  (make-swanye-user databaseID activityPubID     type         email
                    password   salt              createdAt    confirmationToken
                    publicKey  privateKey        inbox        outbox
                    following  followers         liked        featured
                    name       preferredUsername attributedTo content
                    startTime  endTime           published    summary)
  swanye-user?
  (databaseID        swanye-user-db-id              swanye-user-db-id-set!)
  (activityPubID     swanye-user-ap-id              swanye-user-ap-id-set!)
  (email             swanye-user-email              swanye-user-email-set!)
  (password          swanye-user-password           swanye-user-password-set!)
  (salt              swanye-user-salt               swanye-user-salt-set!)
  (createdAt         swanye-user-created-at         swanye-user-created-at-set!)
  (confirmationToken swanye-user-confirmation-token swanye-user-confirmation-token-set!)
  (publicKey         swanye-user-public-key         swanye-user-public-key-set!)
  (privateKey        swanye-user-private-key        swanye-user-private-key-set!)
  (type              swanye-user-type               swanye-user-type-set!)
  (inbox             swanye-user-inbox              swanye-user-inbox-set!)
  (outbox            swanye-user-outbox             swanye-user-outbox-set!)
  (following         swanye-user-following          swanye-user-following-set!)
  (followers         swanye-user-followers          swanye-user-followers-set!)
  (liked             swanye-user-liked              swanye-user-liked-set!)
  (featured          swanye-user-featured           swanye-user-featured-set!)
  (name              swanye-user-name               swanye-user-name-set!)
  (preferredUsername swanye-user-preferred-username swanye-user-preferred-username-set!)
  (attributedTo      swanye-user-attributed-to      swanye-user-attributed-to-set!)
  (content           swanye-user-content            swanye-user-content-set!)
  (startTime         swanye-user-start-time         swanye-user-start-time-set!)
  (endTime           swanye-user-end-time           swanye-user-end-time-set!)
  (published         swanye-user-published          swanye-user-published-set!)
  (summary           swanye-user-summary            swanye-user-summary-set!))

(define (get-users-where column values)
  (if (null? values)
      '()
    (let* ([type      (cond
                       [(memq column '(#:USER_ID    #:E_MAIL   
                                       #:ACTOR_ID   #:PASSWORD
                                       #:OBJECT_ID  #:CREATED_AT
                                       #:SALT       #:CONFIRMATION_TOKEN
                                       #:PUBLIC_KEY #:PRIVATE_KEY))
                             'user]
                       [(memq column '(#:INBOX     #:FOLLOWING
                                       #:OUTBOX    #:LIKED
                                       #:FOLLOWERS #:FEATURED #:PREFERRED_USERNAME))
                             'actor]
                       [else 'object])]
           [$ENTITY   (case type
                        [(user)   $USERS]
                        [(actor)  $ACTORS]
                        [(object) $OBJECTS])]
           [ENTITY_ID (case type
                        [(user)   #:USER_ID]
                        [(actor)  #:ACTOR_ID]
                        [(object) #:OBJECT_ID])])
      (filter
        identity
        (map
          (lambda (dbENTITY)
            (if-let* ([remainingIDs                     (delq ENTITY_ID '(#:USER_ID #:ACTOR_ID #:OBJECT_ID))]
                      [remaining$                       (delq $ENTITY        (list $USERS $ACTORS $OBJECTS))]
                      [otherENTITIES (cut any null? <>) (map
                                                          (lambda (E_ID$)
                                                            ((cadr E_ID$)
                                                              'get
                                                              #:columns   '(*)
                                                              #:condition (where
                                                                            (car E_ID$)
                                                                            (assoc-ref
                                                                              dbENTITY
                                                                              (symbol->string
                                                                                (keyword->symbol
                                                                                  ENTITY_ID))))))
                                                          (zip remainingIDs remaining$))])
                #f
              (create-database-entity make-swanye-user (apply append (cons dbENTITY (map car otherENTITIES)))
                ["OBJECT_ID"          identity]
                [    "AP_ID"          identity              (compose string->uri string-reverse)]
                ["OBJECT_TYPE"        identity]
                ["E_MAIL"             identity]
                ["PASSWORD"           identity]
                ["SALT"               identity]
                ["CREATED_AT"         positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                ["CONFIRMATION_TOKEN" identity]
                [ "PUBLIC_KEY"        identity]
                ["PRIVATE_KEY"        identity]
                [ "INBOX"             identity              string->uri]
                ["OUTBOX"             identity              string->uri]
                ["FOLLOWING"          (negate string-null?) string->uri]
                ["FOLLOWERS"          (negate string-null?) string->uri]
                ["LIKED"              (negate string-null?) string->uri]
                ["FEATURED"           (negate string-null?) string->uri]
                ["NAME"               identity]
                ["PREFERRED_USERNAME" identity]
                ["ATTRIBUTED_TO"      positive?             (cut get-objects-where #:OBJECT_ID <>)]
                ["CONTENT"            identity]
                ["STARTTIME"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                [  "ENDTIME"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                ["PUBLISHED"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
                ["SUMMARY"            identity])))
          ($ENTITY 'get #:columns   '(*)
                        #:condition (where (if (memq column '(#:OBJECT_ID #:ACTOR_ID))
                                               #:USER_ID
                                             column) values)))))))

(define (get-only-user-where column values)
  (if (null? values)
      '()
    (map
      (lambda (user)
        (create-database-entity make-swanye-user user
          [  "USER_ID"          identity]
          [    "AP_ID"          identity              (compose string->uri string-reverse)]
          ["OBJECT_TYPE"        identity]
          ["E_MAIL"             identity]
          ["PASSWORD"           identity]
          ["SALT"               identity]
          ["CREATED_AT"         positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
          ["CONFIRMATION_TOKEN" identity]
          [ "PUBLIC_KEY"        identity]
          ["PRIVATE_KEY"        identity]
          [ "INBOX"             identity              string->uri]
          ["OUTBOX"             identity              string->uri]
          ["FOLLOWING"          (negate string-null?) string->uri]
          ["FOLLOWERS"          (negate string-null?) string->uri]
          ["LIKED"              (negate string-null?) string->uri]
          ["FEATURED"           (negate string-null?) string->uri]
          ["NAME"               identity]
          ["PREFERRED_USERNAME" identity]
          ["ATTRIBUTED_TO"      positive?             (cut get-objects-where #:OBJECT_ID <>)]
          ["CONTENT"            identity]
          ["STARTTIME"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
          [  "ENDTIME"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
          ["PUBLISHED"          positive?             (compose time-utc->date (cut make-time time-utc 0 <>))]
          ["SUMMARY"            identity]))
      ($USERS 'get #:columns '(*) #:condition (where column values)))))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;  T I M E L I N E S  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(define (get-home-timeline sID)
  (apply
    append
    (map
      (compose (cut get-objects-where #:OBJECT_ID <>) cdar)
      ($TIMELINES
        'get
        #:columns   '(OBJECT_ID)
        #:condition (where #:USER_ID (assoc-ref
                                       (car ($SESSIONS
                                              'get
                                              #:columns   '(USER_ID)
                                              #:condition (where #:SESSION_ID sID)))
                                       "USER_ID"))))))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;  F O L L O W E R S  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(define (get-followers-of user)
  (let ([userID (case-pred user
                  [swanye-user? (swanye-user-db-id user)]
                  [string?      (swanye-user-db-id
                                  (get-only-user-where #:PREFERRED_USERNAME user))]
                  [number?      user])])
    (get-actors-where
      #:ACTOR_ID
      (map
        (cut assoc-ref <> "ACTOR_ID__FOLLOWER")
        ($FOLLOWERS 'get #:columns   '(*)
                         #:condition (where #:USER_ID__FOLLOWEE userID))))))
