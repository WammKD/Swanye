;;;; This lib file was generated by GNU Artanis, please add your license header below.
;;;; And please respect the freedom of other people, please.
;;;; <YOUR LICENSE HERE>

(define-module (Swanye utils)
  #:use-module (ice-9   regex)
  #:use-module (artanis page)
  #:use-module (artanis route)
  #:use-module (web     request)
  #:use-module (web     uri)
  #:export (if-let  case-pred
            if-let* create-database-entity
            return-if process-redirect
            gsub))

;;;;;;;;;;;;;;;;;;;
;;  M A C R O S  ;;
;;;;;;;;;;;;;;;;;;;
(define-syntax if-let-helper
  (syntax-rules ()
    [(_ letVersion
        ([bnd             val]    ...)
        (cnd                      ...)
        ()                             then else) (letVersion ([bnd val] ...)
                                                    (if (and cnd ...) then else))]
    [(_ letVersion
        ([bnd             val]    ...)
        (cnd                      ...)
        ([binding       value] . rest) then else) (if-let-helper letVersion
                                                                 ([bnd val] ... [binding value])
                                                                 (cnd       ...           value)
                                                                 rest                            then else)]
    [(_ letVersion
        ([bnd             val]    ...)
        (cnd                      ...)
        ([binding funct value] . rest) then else) (if-let-helper letVersion
                                                                 ([bnd val] ... [binding value])
                                                                 (cnd       ... (funct binding))
                                                                 rest                            then else)]))
(define-syntax if-let
  (syntax-rules ()
    [(_ ([binding         value]  ...) then else) (let ([binding value] ...)
                                                    (if (and binding ...) then else))]
    [(_ (binding-funct-value      ...) then else) (if-let-helper let
                                                                 ()
                                                                 ()
                                                                 (binding-funct-value ...) then else)]))
(define-syntax if-let*
  (syntax-rules ()
    [(_ ([binding         value]  ...) then else) (let* ([binding value] ...)
                                                    (if (and binding ...) then else))]
    [(_ (binding-funct-value      ...) then else) (if-let-helper let*
                                                                 ()
                                                                 ()
                                                                 (binding-funct-value ...) then else)]))



(define-syntax case-pred
  (syntax-rules (else)
    [(_ key [pred result] ... [else lastResort]) (cond
                                                  [(pred key)     result]
                                                  ...
                                                  [else       lastResort])]
    [(_ key [pred result] ...)                   (cond
                                                  [(pred key) result] ...)]))



(define-syntax create-database-entity-helper
  (syntax-rules ()
    [(_ creation-funct alist
        (args                            ...)
        ()                                   ) (apply creation-funct (list args ...))]
    [(_ creation-funct alist
        (args                            ...)
        ([key check? transform-funct] . rest)) (create-database-entity-helper creation-funct alist
                                                                              (args ... (let ([value (assoc-ref alist key)])
                                                                                          (if (and
                                                                                                (check? value)
                                                                                                (not (eq? value 'null)))
                                                                                              (transform-funct value)
                                                                                            #f)))
                                                                              rest)]
    [(_ creation-funct alist
        (args                            ...)
        ([key check?]                 . rest)) (create-database-entity-helper creation-funct alist
                                                                              (args ... (let ([value (assoc-ref alist key)])
                                                                                          (if (and
                                                                                                (check? value)
                                                                                                (not (eq? value 'null))) value #f)))
                                                                              rest)]))

(define-syntax create-database-entity
  (syntax-rules ()
    [(_ creation-funct alist args ...)  (create-database-entity-helper creation-funct alist
                                                                       ()
                                                                       (args ...))]))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;  U T I L I T I E S  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(define (return-if this else)
  (if this this else))

(define (gsub regexp replacement str)
  (if-let ([isMatch (string-match regexp str)])
      (regexp-substitute #f isMatch 'pre replacement 'post)
    str))

(define (process-redirect rc path)
  (redirect-to
    rc 
    (let ([host (request-host (rc-req rc))])
      (string->uri (string-append/shared
                     "http"
                     (if (or
                           (string=? (car host) "localhost")
                           ;; TODO: actually check properly for an IP address
                           (string->number (substring (car host) 0 1))) "" "s")
                     "://"
                     (car host)
                     (if (cdr host)
                         (string-append/shared ":" (number->string (cdr host)))
                       "")
                     path)))))
